package org.blep.spysql;

import lombok.AllArgsConstructor;
import lombok.Delegate;
import lombok.NonNull;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;

/**
 * @author blep
 *         Date: 07/12/13
 *         Time: 08:31
 */
@AllArgsConstructor
public class SpyConnection implements Connection{
    @NonNull
    private final Collection<SqlListener> listeners;

    @Override
    public Statement createStatement() throws SQLException {
        return new SpyStatement(listeners, delegate.createStatement());
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return new SpyPreparedStatement(listeners, sql, delegate.prepareStatement(sql));
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return new SpyStatement(listeners, delegate.createStatement(resultSetType, resultSetConcurrency));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
            throws SQLException {
        return new SpyPreparedStatement(listeners, sql,
                delegate.prepareStatement(sql, resultSetType, resultSetConcurrency));
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
            throws SQLException {
        return new SpyStatement(listeners, delegate.createStatement(resultSetType,
                resultSetConcurrency, resultSetHoldability));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
                                              int resultSetHoldability) throws SQLException {
        return new SpyPreparedStatement(listeners, sql, delegate.prepareStatement(sql, resultSetType,
                resultSetConcurrency, resultSetHoldability));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return new SpyPreparedStatement(listeners, sql, delegate.prepareStatement(sql, autoGeneratedKeys));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return new SpyPreparedStatement(listeners, sql, delegate.prepareStatement(sql, columnIndexes));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return new SpyPreparedStatement(listeners, sql, delegate.prepareStatement(sql, columnNames));
    }

    @Delegate(excludes = Excludes.class)
    private Connection delegate;

    private interface Excludes{
        Statement createStatement() throws SQLException;
        PreparedStatement prepareStatement(String sql) throws SQLException;
        Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException;
        PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException;
        Statement createStatement(int resultSetType, int resultSetConcurrency,
                                  int resultSetHoldability) throws SQLException;
        PreparedStatement prepareStatement(String sql, int resultSetType,
                                           int resultSetConcurrency, int resultSetHoldability)
                throws SQLException;
        PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
                throws SQLException;
        PreparedStatement prepareStatement(String sql, int columnIndexes[])
                throws SQLException;
        PreparedStatement prepareStatement(String sql, String columnNames[])
                throws SQLException;
    }
}
